#!/usr/bin/env python

import os
import shutil
import subprocess
from sys import argv


def generate_pkg_list_readme(directory: str):
    """
    Recursively looks a directory using `fd` , captures the
    basenames of files with `spec` extension and appends
    each of them to a `README.md` document.

    Args:
        directory: The directory to search for files.
    """

    output_file = os.path.join(directory, 'README.md')

    # Use `fd` to find files with the `spec` extension and get their basenames
    fd_path = shutil.which('fd')

    if fd_path is not None:
        msg = 'Error: `fd` was not found. Please ensure `fd` is installed and added to a directory in your $PATH'
        raise FileNotFoundError(msg)

    args = [str(fd_path), '*.spec', directory]
    result = subprocess.run(args, capture_output=True, text=True, check=True)
    file_paths = result.stdout.strip().split('\n')

    # Filter through file paths and remove any empty strings might cause an error
    file_paths = [path for path in file_paths if is_empty_null(path)]

    # Sort through the file paths and get the filenames of each `.spec` file
    filenames = sorted([os.path.basename(path) for path in file_paths])

    # Generate the Markdown content
    markdown_content = "# Packages available for installation\n\n"
    for filename in filenames:
        # Sort through the filename and retrieve the basename
        pkg_name, _ = os.path.splitext(filename)
        markdown_content += f"* {pkg_name}"

    # Create the `README.md` file
    with open(output_file, 'w') as f:
        _ = f.write(markdown_content)

    # Print success message
    print(f"Successfully generated `{output_file}`!")
# end of generate_pkg_list_readme

def is_empty_null(obj: str):
    return (obj == '') or (len(obj) == 0) or (not obj) or (not obj.strip())
# end of is_empty_null

if __name__ == '__main__':
    generate_pkg_list_readme(argv[1])
